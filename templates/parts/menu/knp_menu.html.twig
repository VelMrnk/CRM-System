{% extends 'parts/menu/knp_menu_base.html.twig' %}

{% macro attributes(attributes) %}
{% for name, value in attributes %}
    {%- if value is not none and value is not same as(false) -%}
        {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
    {%- endif -%}
{%- endfor -%}
{% endmacro %}

{% block compressed_root %}
{% apply spaceless %}
{{ block('root') }}
{% endapply %}
{% endblock %}

{% block root %}
{% set listAttributes = item.childrenAttributes %}
    {{ block('list') -}}
{% endblock %}

{% block list %}
{% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
    {% import _self as knp_menu %}
     {% if listAttributes.class is defined and listAttributes['class'] == 'menu_level_1' %}
         <ul {{ not matcher.isAncestor(item) ? 'class="hidden-ul"' }}>
             {{ block('children') }}
         </ul></li>
     {% else %}
         {{ block('children') }}
     {% endif %}
{% endif %}
{% endblock %}

{% block children %}
{# save current variables #}
{% set currentOptions = options %}
{% set currentItem = item %}
{# update the depth for children #}
{% if options.depth is not none %}
{% set options = options|merge({'depth': currentOptions.depth - 1}) %}
{% endif %}
{# update the matchingDepth for children #}
{% if options.matchingDepth is not none and options.matchingDepth > 0 %}
{% set options = options|merge({'matchingDepth': currentOptions.matchingDepth - 1}) %}
{% endif %}

{% for key,item in currentItem.children %}
    {{ block('item') }}
{% endfor %}

{# restore current variables #}
{% set item = currentItem %}
{% set options = currentOptions %}
{% endblock %}

{% block item %}
{% if item.displayed %}
{# building the class of the item #}
    {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
    {%- if matcher.isCurrent(item) %}
        {%- set classes = classes|merge([options.currentClass]) %}
    {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
        {%- set classes = classes|merge([options.ancestorClass]) %}
    {%- endif %}
    {%- if item.actsLikeFirst %}
        {%- set classes = classes|merge([options.firstClass]) %}
    {%- endif %}
    {%- if item.actsLikeLast %}
        {%- set classes = classes|merge([options.lastClass]) %}
    {%- endif %}

    {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
    {% if item.hasChildren and options.depth is not same as(0) %}
        {% if options.branch_class is not empty and item.displayChildren %}
            {%- set classes = classes|merge([options.branch_class]) %}
        {% endif %}
    {% elseif options.leaf_class is not empty %}
        {%- set classes = classes|merge([options.leaf_class]) %}
    {%- endif %}

    {%- set attributes = item.attributes %}
    {%- if classes is not empty %}
        {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {%- endif %}
{# displaying the item #}
    {% import _self as knp_menu %}
    {%- if item.attributes['class'] is defined and item.attributes['class'] == 'btn btn-action' %}
        {{ block('buttonElement') }}
    {%- elseif item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
        {{ block('linkElement') }}
    {%- else %}
        {{ block('rootElement') }}
    {%- endif %}
{# render the list of children#}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
        {{ block('list') }}
{% endif %}
{% endblock %}

{% block buttonElement %}
    {% import _self as knp_menu %}
    <li>
        <a href="{{ item.uri }}">
            <span{{ knp_menu.attributes(item.attributes) }}>
                {{ knp_menu.attributes(item.labelAttributes) }}{{ block('label') }}
            </span>
        </a>
    </li>
{% endblock %}

{% block linkElement %}
    {% import _self as knp_menu %}
    <li {{ knp_menu.attributes(attributes) }}>
        <a href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}><i class="{{ block('icon') }}"></i>
            {{ block('label') }}
        </a>
    </li>
{% endblock %}

{% block rootElement %}{% import _self as knp_menu %}
{% if item.attributes.class is defined and item.attributes.class == 'navigation-header' %}
<li {{ knp_menu.attributes(item.attributes) }}>
    <span>
        {{ knp_menu.attributes(item.labelAttributes) }}{{ block('label')|upper }}
    </span>
    <i class="{{ block('icon') }}"></i>
</li>
{% else %}
<li {{ matcher.isAncestor(item) ? 'class="active"' }}>
    <a {{ knp_menu.attributes(item.attributes) }}>
        <span>
            {{ knp_menu.attributes(item.labelAttributes) }}{{ block('label')|upper }}
        </span>
        <i class="{{ block('icon') }}"></i>
    </a>
{% endif %}

{% endblock %}

{% block label %}{% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}{% endblock %}
